<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was auto-generated by Register Manager -->
<spirit:component xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009">
<!-- ==== Vendor is mandatory for IP-XACT to pass schema validation. Please add the vendor property and re-generate IP-XACT. ==== -->
  <spirit:vendor/>
<!-- ==== Library is mandatory for IP-XACT to pass schema validation. Please add the library property and re-generate IP-XACT. ==== -->
  <spirit:library/>
  <spirit:name>CV32A6_CSR</spirit:name>
<!-- ==== Version is mandatory for IP-XACT to pass schema validation. Please add the version property and re-generate IP-XACT. ==== -->
  <spirit:version/>
  <spirit:busInterfaces>
    <spirit:busInterface>
      <spirit:name>Other</spirit:name>
<!-- ==== Bus and abstraction type needs to be filled in here. Please fill in the the VLVN below.  ==== -->
      <spirit:busType spirit:vendor="" spirit:library="" spirit:name="" spirit:version=""/>
      <spirit:abstractionType spirit:vendor="" spirit:library="" spirit:name="" spirit:version=""/>
      <spirit:slave>
        <spirit:memoryMapRef spirit:memoryMapRef="Other"/>
      </spirit:slave>
      <spirit:bitsInLau>32</spirit:bitsInLau>
    </spirit:busInterface>
  </spirit:busInterfaces>
  <spirit:memoryMaps>
    <spirit:memoryMap>
      <spirit:name>Other</spirit:name>
      <spirit:addressBlock>
        <spirit:name>address_block</spirit:name>
        <spirit:baseAddress>0x0</spirit:baseAddress>
        <spirit:range>0x4000</spirit:range>
        <spirit:width>32</spirit:width>
        <spirit:usage>register</spirit:usage>
        <spirit:register>
          <spirit:name>fflags</spirit:name>
          <spirit:displayName>Floating-Point Accrued Exceptions</spirit:displayName>
          <spirit:description>The fields within the ``fcsr`` can also be accessed individually through different CSR addresses, and separate assembler pseudoinstructions are defined for these accesses. The FRRM instruction reads the Rounding Mode field ``frm`` and copies it into the least-significant three bits of integer register *rd*, with zero in all other bits. FSRM swaps the value in frm by copying the original value into integer register *rd*, and then writing a new value obtained from the three least-significant bits of integer register *rs1* into ``frm``. FRFLAGS and FSFLAGS are defined analogously for the Accrued Exception Flags field ``fflags``.</spirit:description>
          <spirit:addressOffset>0x1</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0x0000001F</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>NV</spirit:name>
            <spirit:displayName>Invalid Operation</spirit:displayName>
            <spirit:description>The accrued exception flags indicate the exception conditions that have arisen on any floating-point arithmetic instruction since the field was last reset by software. The base RISC-V ISA does not support generating a trap on the setting of a floating-point exception flag.</spirit:description>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>DZ</spirit:name>
            <spirit:displayName>Divide by Zero</spirit:displayName>
            <spirit:description>The accrued exception flags indicate the exception conditions that have arisen on any floating-point arithmetic instruction since the field was last reset by software. The base RISC-V ISA does not support generating a trap on the setting of a floating-point exception flag.</spirit:description>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>OF</spirit:name>
            <spirit:displayName>Overflow</spirit:displayName>
            <spirit:description>The accrued exception flags indicate the exception conditions that have arisen on any floating-point arithmetic instruction since the field was last reset by software. The base RISC-V ISA does not support generating a trap on the setting of a floating-point exception flag.</spirit:description>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>UF</spirit:name>
            <spirit:displayName>Underflow</spirit:displayName>
            <spirit:description>The accrued exception flags indicate the exception conditions that have arisen on any floating-point arithmetic instruction since the field was last reset by software. The base RISC-V ISA does not support generating a trap on the setting of a floating-point exception flag.</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>NX</spirit:name>
            <spirit:displayName>Inexact</spirit:displayName>
            <spirit:description>The accrued exception flags indicate the exception conditions that have arisen on any floating-point arithmetic instruction since the field was last reset by software. The base RISC-V ISA does not support generating a trap on the setting of a floating-point exception flag.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>U</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>frm</spirit:name>
          <spirit:displayName>Floating-Point Dynamic Rounding Mode</spirit:displayName>
          <spirit:description>The fields within the ``fcsr`` can also be accessed individually through different CSR addresses, and separate assembler pseudoinstructions are defined for these accesses. The FRRM instruction reads the Rounding Mode field ``frm`` and copies it into the least-significant three bits of integer register *rd*, with zero in all other bits. FSRM swaps the value in frm by copying the original value into integer register *rd*, and then writing a new value obtained from the three least-significant bits of integer register *rs1* into ``frm``. FRFLAGS and FSFLAGS are defined analogously for the Accrued Exception Flags field ``fflags``.</spirit:description>
          <spirit:addressOffset>0x2</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0x00000007</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>FRM</spirit:name>
            <spirit:displayName>Floating-Point Rounding Mode</spirit:displayName>
            <spirit:description>Floating-point operations use either a static rounding mode encoded in the instruction, or a dynamic rounding mode held in ``frm``. Rounding modes are encoded as shown in the enumerated value. A value of 111 in
the instruction’s *rm* field selects the dynamic rounding mode held in ``frm``. If ``frm`` is set to an invalid value (101–111), any subsequent attempt to execute a floating-point operation with a dynamic rounding mode will raise an illegal instruction exception. Some instructions, including widening conversions, have the *rm* field but are nevertheless unaffected by the rounding mode; software should set their *rm* field to RNE (000).</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>RNE</spirit:name>
                <spirit:description>Round to Nearest, ties to Even</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>RTZ</spirit:name>
                <spirit:description>Round towards Zero</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>RDN</spirit:name>
                <spirit:description>Round Down</spirit:description>
                <spirit:value>2</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>RUP</spirit:name>
                <spirit:description>Round Up</spirit:description>
                <spirit:value>3</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>RMM</spirit:name>
                <spirit:description>Round to Nearest, ties to Max Magnitude</spirit:description>
                <spirit:value>4</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>INVALID_5</spirit:name>
                <spirit:description>*Reserved for future use.*</spirit:description>
                <spirit:value>5</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>INVALID_6</spirit:name>
                <spirit:description>*Reserved for future use.*</spirit:description>
                <spirit:value>6</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>DYN</spirit:name>
                <spirit:description>In instruction’s *rm* field, selects dynamic rounding mode;
In Rounding Mode register, *Invalid*.</spirit:description>
                <spirit:value>7</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>U</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>fcsr</spirit:name>
          <spirit:displayName>Floating-Point Control and Status Register</spirit:displayName>
          <spirit:description>The floating-point control and status register, ``fcsr``, is a RISC-V control and status register (CSR). It is a read/write register that selects the dynamic rounding mode for floating-point arithmetic operations and holds the accrued exception flags.

The ``fcsr`` register can be read and written with the FRCSR and FSCSR instructions, which are assembler pseudoinstructions built on the underlying CSR access instructions. FRCSR reads ``fcsr`` by copying it into integer register *rd*. FSCSR swaps the value in ``fcsr`` by copying the original value into integer register *rd*, and then writing a new value obtained from integer register *rs1* into ``fcsr``.

The fields within the ``fcsr`` can also be accessed individually through different CSR addresses, and separate assembler pseudoinstructions are defined for these accesses. The FRRM instruction reads the Rounding Mode field ``frm`` and copies it into the least-significant three bits of integer register *rd*, with zero in all other bits. FSRM swaps the value in frm by copying the original value into integer register *rd*, and then writing a new value obtained from the three least-significant bits of integer register *rs1* into ``frm``. FRFLAGS and FSFLAGS are defined analogously for the Accrued Exception Flags field ``fflags``.
</spirit:description>
          <spirit:addressOffset>0x3</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0x000000FF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>FRM</spirit:name>
            <spirit:displayName>Floating-Point Rounding Mode</spirit:displayName>
            <spirit:description>Floating-point operations use either a static rounding mode encoded in the instruction, or a dynamic rounding mode held in ``frm``. Rounding modes are encoded as shown in the enumerated value. A value of 111 in
the instruction’s *rm* field selects the dynamic rounding mode held in ``frm``. If ``frm`` is set to an invalid value (101–111), any subsequent attempt to execute a floating-point operation with a dynamic rounding mode will raise an illegal instruction exception. Some instructions, including widening conversions, have the *rm* field but are nevertheless unaffected by the rounding mode; software should set their *rm* field to RNE (000).</spirit:description>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>RNE</spirit:name>
                <spirit:description>Round to Nearest, ties to Even</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>RTZ</spirit:name>
                <spirit:description>Round towards Zero</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>RDN</spirit:name>
                <spirit:description>Round Down</spirit:description>
                <spirit:value>2</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>RUP</spirit:name>
                <spirit:description>Round Up</spirit:description>
                <spirit:value>3</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>RMM</spirit:name>
                <spirit:description>Round to Nearest, ties to Max Magnitude</spirit:description>
                <spirit:value>4</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>INVALID_5</spirit:name>
                <spirit:description>*Reserved for future use.*</spirit:description>
                <spirit:value>5</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>INVALID_6</spirit:name>
                <spirit:description>*Reserved for future use.*</spirit:description>
                <spirit:value>6</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>DYN</spirit:name>
                <spirit:description>In instruction’s *rm* field, selects dynamic rounding mode;
In Rounding Mode register, *Invalid*.</spirit:description>
                <spirit:value>7</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
          </spirit:field>
          <spirit:field>
            <spirit:name>NV</spirit:name>
            <spirit:displayName>Invalid Operation</spirit:displayName>
            <spirit:description>The accrued exception flags indicate the exception conditions that have arisen on any floating-point arithmetic instruction since the field was last reset by software. The base RISC-V ISA does not support generating a trap on the setting of a floating-point exception flag.</spirit:description>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>DZ</spirit:name>
            <spirit:displayName>Divide by Zero</spirit:displayName>
            <spirit:description>The accrued exception flags indicate the exception conditions that have arisen on any floating-point arithmetic instruction since the field was last reset by software. The base RISC-V ISA does not support generating a trap on the setting of a floating-point exception flag.</spirit:description>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>OF</spirit:name>
            <spirit:displayName>Overflow</spirit:displayName>
            <spirit:description>The accrued exception flags indicate the exception conditions that have arisen on any floating-point arithmetic instruction since the field was last reset by software. The base RISC-V ISA does not support generating a trap on the setting of a floating-point exception flag.</spirit:description>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>UF</spirit:name>
            <spirit:displayName>Underflow</spirit:displayName>
            <spirit:description>The accrued exception flags indicate the exception conditions that have arisen on any floating-point arithmetic instruction since the field was last reset by software. The base RISC-V ISA does not support generating a trap on the setting of a floating-point exception flag.</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>NX</spirit:name>
            <spirit:displayName>Inexact</spirit:displayName>
            <spirit:description>The accrued exception flags indicate the exception conditions that have arisen on any floating-point arithmetic instruction since the field was last reset by software. The base RISC-V ISA does not support generating a trap on the setting of a floating-point exception flag.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>U</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>sstatus</spirit:name>
          <spirit:displayName>Supervisor Status</spirit:displayName>
          <spirit:description>The ``sstatus`` register keeps track of the processor’s current operating state.

The ``sstatus`` register is a subset of the ``mstatus`` register.</spirit:description>
          <spirit:addressOffset>0x100</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0x800DE133</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>SD</spirit:name>
            <spirit:displayName>State Dirty</spirit:displayName>
            <spirit:description>The SD bit is a read-only bit that summarizes whether either the FS, VS, or XS fields signal the presence of some dirty state that will require saving extended user context to memory. If FS, XS, and VS are all read-only zero, then SD is also always zero.</spirit:description>
            <spirit:bitOffset>31</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>MXR</spirit:name>
            <spirit:displayName>Make eXecutable Readable</spirit:displayName>
            <spirit:description>The MXR bit modifies the privilege with which loads access virtual memory. When MXR=0, only loads from pages marked readable will succeed. When MXR=1, loads from pages marked either readable or executable (R=1 or X=1) will succeed. MXR has no effect when page-based virtual memory is not in effect.</spirit:description>
            <spirit:bitOffset>19</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>SUM</spirit:name>
            <spirit:displayName>Supervisor User Memory</spirit:displayName>
            <spirit:description>The SUM (permit Supervisor User Memory access) bit modifies the privilege with which S-mode loads and stores access virtual memory. When SUM=0, S-mode memory accesses to pages that are accessible by U-mode will fault. When SUM=1, these accesses are permitted. SUM has no effect when page-based virtual memory is not in effect. Note that, while SUM is ordinarily ignored when not executing in S-mode, it *is* in effect when MPRV=1 and MPP=S. SUM is read-only 0 if S-mode is not supported or if ``satp``.MODE is read-only 0.</spirit:description>
            <spirit:bitOffset>18</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>XS</spirit:name>
            <spirit:displayName>Extension State</spirit:displayName>
            <spirit:description>The XS field is used to reduce the cost of context save and restore by setting and tracking the current state of the user-mode extensions. The XS field encodes the status of the additional user-mode extensions and associated state.

This field can be checked by a context switch routine to quickly determine whether a state save or restore is required. If a save or restore is required, additional instructions and CSRs are typically required to effect and optimize the process.</spirit:description>
            <spirit:bitOffset>15</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read">
                <spirit:name>Off</spirit:name>
                <spirit:description>All off</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read">
                <spirit:name>Initial</spirit:name>
                <spirit:description>None dirty or clean, some on</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read">
                <spirit:name>Clean</spirit:name>
                <spirit:description>None dirty, some clean</spirit:description>
                <spirit:value>2</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read">
                <spirit:name>Dirty</spirit:name>
                <spirit:description>Some dirty</spirit:description>
                <spirit:value>3</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
          </spirit:field>
          <spirit:field>
            <spirit:name>FS</spirit:name>
            <spirit:displayName>Floating-point unit State</spirit:displayName>
            <spirit:description>The FS field is used to reduce the cost of context save and restore by setting and tracking the current state of the floating-point unit. The FS field encodes the status of the floating-point unit state, including the floating-point registers ``f0–f31`` and the CSRs ``fcsr``, ``frm``, and ``fflags``.

This field can be checked by a context switch routine to quickly determine whether a state save or restore is required. If a save or restore is required, additional instructions and CSRs are typically required to effect and optimize the process.</spirit:description>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Off</spirit:name>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Initial</spirit:name>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Clean</spirit:name>
                <spirit:value>2</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Dirty</spirit:name>
                <spirit:value>3</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>SPP</spirit:name>
            <spirit:displayName>Supervisor mode Prior Privilege</spirit:displayName>
            <spirit:description>SPP bit indicates the privilege level at which a hart was executing before entering supervisor mode. When a trap is taken, SPP is set to 0 if the trap originated from user mode, or 1 otherwise. When an SRET instruction is executed to return from the trap handler, the privilege level is set to user mode if the SPP bit is 0, or supervisor mode if the SPP bit is 1; SPP is then set to 0.</spirit:description>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>SPIE</spirit:name>
            <spirit:displayName>Supervisor mode Prior Interrupt Enable</spirit:displayName>
            <spirit:description>The SPIE bit indicates whether supervisor interrupts were enabled prior to trapping into supervisor mode. When a trap is taken into supervisor mode, SPIE is set to SIE, and SIE is set to 0. When
an SRET instruction is executed, SIE is set to SPIE, then SPIE is set to 1.</spirit:description>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>UPIE</spirit:name>
            <spirit:description>When a URET instruction is executed, UIE is set to UPIE, and UPIE is set to 1.</spirit:description>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>SIE</spirit:name>
            <spirit:displayName>Supervisor mode Interrupt Enable</spirit:displayName>
            <spirit:description>The SIE bit enables or disables all interrupts in supervisor mode. When SIE is clear, interrupts are not taken while in supervisor mode. When the hart is running in user-mode, the value in SIE is ignored, and supervisor-level interrupts are enabled. The supervisor can disable individual interrupt sources using the ``sie`` CSR.</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>UIE</spirit:name>
            <spirit:description>The UIE bit enables or disables user-mode interrupts.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>S</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>sie</spirit:name>
          <spirit:displayName>Supervisor Interrupt Enable</spirit:displayName>
          <spirit:description>The ``sie`` is the register containing supervisor interrupt enable bits.</spirit:description>
          <spirit:addressOffset>0x104</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0x00000333</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>SEIE</spirit:name>
            <spirit:displayName>Supervisor-level External Interrupt Enable</spirit:displayName>
            <spirit:description>SEIE is the interrupt-enable bit for supervisor-level external interrupts.</spirit:description>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>UEIE</spirit:name>
            <spirit:description>User-level external interrupts are disabled when the UEIE bit in the sie register is clear.</spirit:description>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>STIE</spirit:name>
            <spirit:displayName>Supervisor-level Timer Interrupt Enable</spirit:displayName>
            <spirit:description>STIE is the interrupt-enable bit for supervisor-level timer interrupts.</spirit:description>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>UTIE</spirit:name>
            <spirit:description>User-level timer interrupts are disabled when the UTIE bit in the sie register is clear.</spirit:description>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>SSIE</spirit:name>
            <spirit:displayName>Supervisor-level Software Interrupt Enable</spirit:displayName>
            <spirit:description>SSIE is the interrupt-enable bit for supervisor-level software interrupts.</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>USIE</spirit:name>
            <spirit:description>User-level software interrupts are disabled when the USIE bit in the sie register is clear</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>S</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>stvec</spirit:name>
          <spirit:displayName>Supervisor Trap Vector Base Address</spirit:displayName>
          <spirit:description>The ``stvec`` register holds trap vector configuration, consisting of a vector base address (BASE) and a vector mode (MODE).</spirit:description>
          <spirit:addressOffset>0x105</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>BASE</spirit:name>
            <spirit:description>The BASE field in stvec is a WARL field that can hold any valid virtual or physical address, subject to the following alignment constraints: the address must be 4-byte aligned, and MODE settings other than Direct might impose additional alignment constraints on the value in the BASE field.</spirit:description>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>30</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>MODE</spirit:name>
            <spirit:description>When MODE=Direct, all traps into supervisor mode cause the ``pc`` to be set to the address in the BASE field. When MODE=Vectored, all synchronous exceptions into supervisor mode cause the ``pc`` to be set to the address in the BASE field, whereas interrupts cause the ``pc`` to be set to the address in the BASE field plus four times the interrupt cause number.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Direct</spirit:name>
                <spirit:description>All exceptions set ``pc`` to BASE.</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Vectored</spirit:name>
                <spirit:description>Asynchronous interrupts set pc to BASE+4×cause.</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Reserved_2</spirit:name>
                <spirit:description>*Reserved*</spirit:description>
                <spirit:value>2</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Reserved_3</spirit:name>
                <spirit:description>*Reserved*</spirit:description>
                <spirit:value>3</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>S</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>scounteren</spirit:name>
          <spirit:displayName>Supervisor Counter Enable</spirit:displayName>
          <spirit:description>The counter-enable register ``scounteren`` controls the availability of the hardware performance monitoring counters to U-mode.</spirit:description>
          <spirit:addressOffset>0x106</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>HPMn</spirit:name>
            <spirit:displayName>Hpmcountern</spirit:displayName>
            <spirit:description>When HPMn is clear, attempts to read the ``hpmcountern`` register while executing in U-mode will cause an illegal instruction exception. When this bit is set, access to the corresponding register is permitted.</spirit:description>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>29</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>IR</spirit:name>
            <spirit:displayName>Instret</spirit:displayName>
            <spirit:description>When IR is clear, attempts to read the ``instret`` register while executing in U-mode will cause an illegal instruction exception. When this bit is set, access to the corresponding register is permitted.</spirit:description>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>TM</spirit:name>
            <spirit:displayName>Time</spirit:displayName>
            <spirit:description>When TM is clear, attempts to read the ``time`` register while executing in U-mode will cause an illegal instruction exception. When this bit is set, access to the corresponding register is permitted.</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>CY</spirit:name>
            <spirit:displayName>Cycle</spirit:displayName>
            <spirit:description>When CY is clear, attempts to read the ``cycle`` register while executing in U-mode will cause an illegal instruction exception. When this bit is set, access to the corresponding register is permitted.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>S</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>sscratch</spirit:name>
          <spirit:displayName>Supervisor Scratch</spirit:displayName>
          <spirit:description>The ``sscratch`` register is dedicated for use by the supervisor. </spirit:description>
          <spirit:addressOffset>0x140</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>SSCRATCH</spirit:name>
            <spirit:displayName>Supervisor Scratch</spirit:displayName>
            <spirit:description>Typically, ``sscratch`` is used to hold a pointer to the hart-local supervisor context while the hart is executing user code. At the beginning of a trap handler, ``sscratch`` is swapped with a user register to provide an initial working register.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>S</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>sepc</spirit:name>
          <spirit:displayName>Supervisor Exception Program Counter</spirit:displayName>
          <spirit:description>When a trap is taken into S-mode, ``sepc`` is written with the virtual address of the instruction that was interrupted or that encountered the exception. Otherwise, ``sepc`` is never written by the implementation, though it may be explicitly written by software.</spirit:description>
          <spirit:addressOffset>0x141</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>SEPC</spirit:name>
            <spirit:displayName>Supervisor Exception Program Counter</spirit:displayName>
            <spirit:description>The low bit of SEPC (SEPC[0]) is always zero. On implementations that support only IALIGN=32, the two low bits (SEPC[1:0]) are always zero.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>S</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>scause</spirit:name>
          <spirit:displayName>Supervisor Cause</spirit:displayName>
          <spirit:description>When a trap is taken into S-mode, ``scause`` is written with a code indicating the event that caused the trap. Otherwise, ``scause`` is never written by the implementation, though it may be explicitly written by software.

Supervisor cause register (``scause``) values after trap are shown in the following table.

=========  ==============  ==============================
Interrupt  Exception Code  Description
=========  ==============  ==============================
        1               0  *Reserved*
        1               1  Supervisor software interrupt
        1             2-4  *Reserved*
        1               5  Supervisor timer interrupt
        1             6-8  *Reserved*
        1               9  Supervisor external interrupt
        1           10-15  *Reserved*
        1             ≥16  *Designated for platform use*
        0               0  Instruction address misaligned
        0               1  Instruction access fault
        0               2  Illegal instruction
        0               3  Breakpoint
        0               4  Load address misaligned
        0               5  Load access fault
        0               6  Store/AMO address misaligned
        0               7  Store/AMO access fault
        0               8  Environment call from U-mode
        0               9  Environment call from S-mode
        0           10-11  *Reserved*
        0              12  Instruction page fault
        0              13  Load page fault
        0              14  *Reserved*
        0              15  Store/AMO page fault
        0           16-23  *Reserved*
        0           24-31  *Designated for custom use*
        0           32-47  *Reserved*
        0           48-63  *Designated for custom use*
        0             ≥64  *Reserved*
=========  ==============  ==============================
</spirit:description>
          <spirit:addressOffset>0x142</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>Interrupt</spirit:name>
            <spirit:description>The Interrupt bit in the ``scause`` register is set if the trap was caused by an interrupt.</spirit:description>
            <spirit:bitOffset>31</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>Exception_Code</spirit:name>
            <spirit:displayName>Exception Code</spirit:displayName>
            <spirit:description>The Exception Code field contains a code identifying the last exception or interrupt.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>31</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WLRL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>S</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>stval</spirit:name>
          <spirit:displayName>Supervisor Trap Value</spirit:displayName>
          <spirit:description>When a trap is taken into S-mode, ``stval`` is written with exception-specific information to assist software in handling the trap. Otherwise, ``stval`` is never written by the implementation, though it may be explicitly written by software. The hardware platform will specify which exceptions must set ``stval`` informatively and which may unconditionally set it to zero.</spirit:description>
          <spirit:addressOffset>0x143</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>STVAL</spirit:name>
            <spirit:displayName>Supervisor Trap Value</spirit:displayName>
            <spirit:description>If ``stval`` is written with a nonzero value when a breakpoint, address-misaligned, access-fault, or page-fault exception occurs on an instruction fetch, load, or store, then ``stval`` will contain the faulting virtual address.

If ``stval`` is written with a nonzero value when a misaligned load or store causes an access-fault or page-fault exception, then ``stval`` will contain the virtual address of the portion of the access that caused the fault.

If ``stval`` is written with a nonzero value when an instruction access-fault or page-fault exception occurs on a system with variable-length instructions, then ``stval`` will contain the virtual address of the portion of the instruction that caused the fault, while ``sepc`` will point to the beginning of the instruction.

The ``stval`` register can optionally also be used to return the faulting instruction bits on an illegal instruction exception (``sepc`` points to the faulting instruction in memory). If ``stval`` is written with a nonzero value when an illegal-instruction exception occurs, then ``stval`` will contain the shortest of:

* the actual faulting instruction
* the first ILEN bits of the faulting instruction
* the first SXLEN bits of the faulting instruction

The value loaded into ``stval`` on an illegal-instruction exception is right-justified and all unused upper bits are cleared to zero. For other traps, ``stval`` is set to zero, but a future standard may redefine ``stval’s`` setting for other traps.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>S</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>sip</spirit:name>
          <spirit:displayName>Supervisor Interrupt Pending</spirit:displayName>
          <spirit:description>The ``sip`` register contains information on pending interrupts.</spirit:description>
          <spirit:addressOffset>0x144</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0x00000333</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>SEIP</spirit:name>
            <spirit:displayName>Supervisor-level External Interrupt Pending</spirit:displayName>
            <spirit:description>SEIP is the interrupt-pending bit for supervisor-level external interrupts.</spirit:description>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>UEIP</spirit:name>
            <spirit:description>UEIP may be written by S-mode software to indicate to U-mode that an external interrupt is pending.</spirit:description>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>STIP</spirit:name>
            <spirit:displayName>Supervisor-level Timer Interrupt Pending</spirit:displayName>
            <spirit:description>SEIP is the interrupt-pending bit for supervisor-level timer interrupts.</spirit:description>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>UTIP</spirit:name>
            <spirit:description>A user-level timer interrupt is pending if the UTIP bit in the sip register is set</spirit:description>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>SSIP</spirit:name>
            <spirit:displayName>Supervisor-level Software Interrupt Pending</spirit:displayName>
            <spirit:description>SSIP is the interrupt-pending bit for supervisor-level software interrupts.</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>USIP</spirit:name>
            <spirit:description>A user-level software interrupt is triggered on the current hart by  riting 1 to its user software interrupt-pending (USIP) bit</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>S</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>satp</spirit:name>
          <spirit:displayName>Supervisor Address Translation and Protection</spirit:displayName>
          <spirit:description>The ``satp`` register controls supervisor-mode address translation and protection.

The ``satp`` register is considered active when the effective privilege mode is S-mode or U-mode. Executions of the address-translation algorithm may only begin using a given value of ``satp`` when ``satp`` is active.

.. note::
  Writing ``satp`` does not imply any ordering constraints between page-table updates and subsequent address translations, nor does it imply any invalidation of address-translation caches. If the new address space’s page tables have been modified, or if an ASID is reused, it may be necessary to execute an SFENCE.VMA instruction after, or in some cases before, writing ``satp``.</spirit:description>
          <spirit:addressOffset>0x180</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>MODE</spirit:name>
            <spirit:displayName>Mode</spirit:displayName>
            <spirit:description>This bitfield selects the current address-translation scheme.

When MODE=Bare, supervisor virtual addresses are equal to supervisor physical addresses, and there is no additional memory protection beyond the physical memory protection scheme.

To select MODE=Bare, software must write zero to the remaining fields of ``satp`` (bits 30–0). Attempting to select MODE=Bare with a nonzero pattern in the remaining fields has an ``unspecified`` effect on the value that the remaining fields assume and an ``unspecified`` effect on address translation and protection behavior.</spirit:description>
            <spirit:bitOffset>31</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Bare</spirit:name>
                <spirit:description>No translation or protection.</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Sv32</spirit:name>
                <spirit:description>Page-based 32-bit virtual addressing.</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>ASID</spirit:name>
            <spirit:displayName>Address Space Identifier</spirit:displayName>
            <spirit:description>This bitfield facilitates address-translation fences on a per-address-space basis.</spirit:description>
            <spirit:bitOffset>22</spirit:bitOffset>
            <spirit:bitWidth>9</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>PPN</spirit:name>
            <spirit:displayName>Physical Page Number</spirit:displayName>
            <spirit:description>This bitfield holds the root page table, i.e., its supervisor physical address divided by 4 KiB.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>22</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>S</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mstatus</spirit:name>
          <spirit:displayName>Machine Status</spirit:displayName>
          <spirit:description>The ``mstatus`` register keeps track of and controls the hart’s current operating state.</spirit:description>
          <spirit:addressOffset>0x300</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0x807FF9BB</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>SD</spirit:name>
            <spirit:displayName>State Dirty</spirit:displayName>
            <spirit:description>The SD bit is a read-only bit that summarizes whether either the FS, VS, or XS fields signal the presence of some dirty state that will require saving extended user context to memory. If FS, XS, and VS are all read-only zero, then SD is also always zero.</spirit:description>
            <spirit:bitOffset>31</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>TSR</spirit:name>
            <spirit:displayName>Trap SRET</spirit:displayName>
            <spirit:description>The TSR bit supports intercepting the supervisor exception return instruction, SRET. When TSR=1, attempts to execute SRET while executing in S-mode will raise an illegal instruction exception. When TSR=0, this operation is permitted in S-mode.</spirit:description>
            <spirit:bitOffset>22</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>TW</spirit:name>
            <spirit:displayName>Timeout Wait</spirit:displayName>
            <spirit:description>The TW bit supports intercepting the WFI instruction. When TW=0, the WFI instruction may execute in lower privilege modes when not prevented for some other reason. When TW=1, then if WFI is executed in any less-privileged mode, and it does not complete within an implementation-specific, bounded time limit, the WFI instruction causes an illegal instruction exception. The time limit may always be 0, in which case WFI always causes an illegal instruction exception in less-privileged modes when TW=1.</spirit:description>
            <spirit:bitOffset>21</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>TVM</spirit:name>
            <spirit:displayName>Trap Virtual Memory</spirit:displayName>
            <spirit:description>The TVM bit supports intercepting supervisor virtual-memory management operations. When TVM=1, attempts to read or write the ``satp`` CSR or execute an SFENCE.VMA or SINVAL.VMA instruction while executing in S-mode will raise an illegal instruction exception. When TVM=0, these operations are permitted in S-mode.</spirit:description>
            <spirit:bitOffset>20</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>MXR</spirit:name>
            <spirit:displayName>Make eXecutable Readable</spirit:displayName>
            <spirit:description>The MXR bit modifies the privilege with which loads access virtual memory. When MXR=0, only loads from pages marked readable will succeed. When MXR=1, loads from pages marked either readable or executable (R=1 or X=1) will succeed. MXR has no effect when page-based virtual memory is not in effect.</spirit:description>
            <spirit:bitOffset>19</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>SUM</spirit:name>
            <spirit:displayName>Supervisor User Memory</spirit:displayName>
            <spirit:description>The SUM (permit Supervisor User Memory access) bit modifies the privilege with which S-mode loads and stores access virtual memory. When SUM=0, S-mode memory accesses to pages that are accessible by U-mode will fault. When SUM=1, these accesses are permitted. SUM has no effect when page-based virtual memory is not in effect. Note that, while SUM is ordinarily ignored when not executing in S-mode, it is in effect when MPRV=1 and MPP=S.</spirit:description>
            <spirit:bitOffset>18</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>MPRV</spirit:name>
            <spirit:displayName>Modify Privilege</spirit:displayName>
            <spirit:description>The MPRV (Modify PRiVilege) bit modifies the effective privilege mode, i.e., the privilege level at which loads and stores execute. When MPRV=0, loads and stores behave as normal, using the translation and protection mechanisms of the current privilege mode. When MPRV=1, load and store memory addresses are translated and protected, and endianness is applied, as though the current privilege mode were set to MPP. Instruction address-translation and protection are unaffected by the setting of MPRV.</spirit:description>
            <spirit:bitOffset>17</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>XS</spirit:name>
            <spirit:displayName>Extension State</spirit:displayName>
            <spirit:description>The XS field is used to reduce the cost of context save and restore by setting and tracking the current state of the user-mode extensions. The XS field encodes the status of the additional user-mode extensions and associated state.

This field can be checked by a context switch routine to quickly determine whether a state save or restore is required. If a save or restore is required, additional instructions and CSRs are typically required to effect and optimize the process.</spirit:description>
            <spirit:bitOffset>15</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read">
                <spirit:name>Off</spirit:name>
                <spirit:description>All off</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read">
                <spirit:name>Initial</spirit:name>
                <spirit:description>None dirty or clean, some on</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read">
                <spirit:name>Clean</spirit:name>
                <spirit:description>None dirty, some clean</spirit:description>
                <spirit:value>2</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read">
                <spirit:name>Dirty</spirit:name>
                <spirit:description>Some dirty</spirit:description>
                <spirit:value>3</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
          </spirit:field>
          <spirit:field>
            <spirit:name>FS</spirit:name>
            <spirit:displayName>Floating-point unit State</spirit:displayName>
            <spirit:description>The FS field is used to reduce the cost of context save and restore by setting and tracking the current state of the floating-point unit. The FS field encodes the status of the floating-point unit state, including the floating-point registers ``f0–f31`` and the CSRs ``fcsr``, ``frm``, and ``fflags``.

This field can be checked by a context switch routine to quickly determine whether a state save or restore is required. If a save or restore is required, additional instructions and CSRs are typically required to effect and optimize the process.</spirit:description>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Off</spirit:name>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Initial</spirit:name>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Clean</spirit:name>
                <spirit:value>2</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Dirty</spirit:name>
                <spirit:value>3</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>MPP</spirit:name>
            <spirit:displayName>Machine mode Prior Privilege</spirit:displayName>
            <spirit:description>Holds the previous privilege mode for machine mode.</spirit:description>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>SPP</spirit:name>
            <spirit:displayName>Supervisor mode Prior Privilege</spirit:displayName>
            <spirit:description>Holds the previous privilege mode for supervisor mode.</spirit:description>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>MPIE</spirit:name>
            <spirit:displayName>Machine mode Prior Interrupt Enable</spirit:displayName>
            <spirit:description>Indicates whether machine interrupts were enabled prior to trapping into machine mode.</spirit:description>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>SPIE</spirit:name>
            <spirit:displayName>Supervisor mode Prior Interrupt Enable</spirit:displayName>
            <spirit:description>Indicates whether supervisor interrupts were enabled prior to trapping into supervisor mode.</spirit:description>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>UPIE</spirit:name>
            <spirit:description>indicates whether user-level interrupts were enabled prior to taking a user-level trap</spirit:description>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>MIE</spirit:name>
            <spirit:displayName>Machine mode Interrupt Enable</spirit:displayName>
            <spirit:description>Global interrupt-enable bit for Machine mode.</spirit:description>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>SIE</spirit:name>
            <spirit:displayName>Supervisor mode Interrupt Enable</spirit:displayName>
            <spirit:description>Global interrupt-enable bit for Supervisor mode.</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>UIE</spirit:name>
            <spirit:description>Global interrupt-enable bits</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>misa</spirit:name>
          <spirit:displayName>Machine ISA</spirit:displayName>
          <spirit:description>The misa CSR is reporting the ISA supported by the hart.</spirit:description>
          <spirit:addressOffset>0x301</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xC3FFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>MXL</spirit:name>
            <spirit:displayName>Machine XLEN</spirit:displayName>
            <spirit:description>The MXL field encodes the native base integer ISA width.</spirit:description>
            <spirit:bitOffset>30</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>XLEN_32</spirit:name>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>XLEN_64</spirit:name>
                <spirit:value>2</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>XLEN_128</spirit:name>
                <spirit:value>3</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>Extensions</spirit:name>
            <spirit:displayName>Extensions</spirit:displayName>
            <spirit:description>The Extensions field encodes the presence of the standard extensions, with a single bit per letter of the alphabet.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>26</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>A</spirit:name>
                <spirit:description>Atomic extension.</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>B</spirit:name>
                <spirit:description>*Tentatively reserved for Bit-Manipulation extension.*</spirit:description>
                <spirit:value>2</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>C</spirit:name>
                <spirit:description>Compressed extension.</spirit:description>
                <spirit:value>4</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>D</spirit:name>
                <spirit:description>Double-precision floating-point extension.</spirit:description>
                <spirit:value>8</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>E</spirit:name>
                <spirit:description>RV32E base ISA.</spirit:description>
                <spirit:value>16</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>F</spirit:name>
                <spirit:description>Single-precision floating-point extension.</spirit:description>
                <spirit:value>32</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>G</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>64</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>H</spirit:name>
                <spirit:description>Hypervisor extension.</spirit:description>
                <spirit:value>128</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>I</spirit:name>
                <spirit:description>RV32I/64I/128I base ISA.</spirit:description>
                <spirit:value>256</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>J</spirit:name>
                <spirit:description>*Tentatively reserved for Dynamically Translated Languages extension.*</spirit:description>
                <spirit:value>512</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>K</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>1024</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>L</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>2048</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>M</spirit:name>
                <spirit:description>Integer Multiply/Divide extension.</spirit:description>
                <spirit:value>4096</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>N</spirit:name>
                <spirit:description>*Tentatively reserved for User-Level Interrupts extension.*</spirit:description>
                <spirit:value>8192</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>O</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>16384</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>P</spirit:name>
                <spirit:description>*Tentatively reserved for Packed-SIMD extension.*</spirit:description>
                <spirit:value>32768</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Q</spirit:name>
                <spirit:description>Quad-precision floating-point extension.</spirit:description>
                <spirit:value>65536</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>R</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>131072</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>S</spirit:name>
                <spirit:description>Supervisor mode implemented.</spirit:description>
                <spirit:value>262144</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>T</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>524288</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>U</spirit:name>
                <spirit:description>User mode implemented.</spirit:description>
                <spirit:value>1048576</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>V</spirit:name>
                <spirit:description>*Tentatively reserved for Vector extension.*</spirit:description>
                <spirit:value>2097152</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>W</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>4194304</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>X</spirit:name>
                <spirit:description>Non-standard extensions present.</spirit:description>
                <spirit:value>8388608</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Y</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>16777216</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Z</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>33554432</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>medeleg</spirit:name>
          <spirit:displayName>Machine Exception Delegation</spirit:displayName>
          <spirit:description>Provides individual read/write bits to indicate that certain exceptions should be processed directly by a lower privilege level.</spirit:description>
          <spirit:addressOffset>0x302</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>Synchronous_Exceptions</spirit:name>
            <spirit:displayName>Synchronous Exceptions</spirit:displayName>
            <spirit:description>There is a bit position allocated for every synchronous exception,
with the index of the bit position equal to the value returned in the ``mcause`` register.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mideleg</spirit:name>
          <spirit:displayName>Machine Interrupt Delegation</spirit:displayName>
          <spirit:description>Provides individual read/write bits to indicate that certain interrupts should be processed directly by a lower privilege level.</spirit:description>
          <spirit:addressOffset>0x303</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>Interrupts</spirit:name>
            <spirit:displayName>Interrupts</spirit:displayName>
            <spirit:description>This bitfield holds trap delegation bits for individual interrupts, with the layout of bits matching those in the ``mip`` register.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mie</spirit:name>
          <spirit:displayName>Machine Interrupt Enable</spirit:displayName>
          <spirit:description>This register contains machine interrupt enable bits.</spirit:description>
          <spirit:addressOffset>0x304</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0x00000BBB</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>MEIE</spirit:name>
            <spirit:displayName>M-mode External Interrupt Enable</spirit:displayName>
            <spirit:description>Enables machine mode external interrupts.</spirit:description>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>SEIE</spirit:name>
            <spirit:displayName>S-mode External Interrupt Enable</spirit:displayName>
            <spirit:description>Enables supervisor mode external interrupts.</spirit:description>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>UEIE</spirit:name>
            <spirit:description>enables U-mode external interrupts</spirit:description>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>MTIE</spirit:name>
            <spirit:displayName>M-mode Timer Interrupt Enable</spirit:displayName>
            <spirit:description>Enables machine mode timer interrupts.</spirit:description>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>STIE</spirit:name>
            <spirit:displayName>S-mode Timer Interrupt Enable</spirit:displayName>
            <spirit:description>Enables supervisor mode timer interrupts.</spirit:description>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>UTIE</spirit:name>
            <spirit:description>timer interrupt-enable bit for U-mode</spirit:description>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>MSIE</spirit:name>
            <spirit:displayName>M-mode Software Interrupt Enable</spirit:displayName>
            <spirit:description>Enables machine mode software interrupts.</spirit:description>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>SSIE</spirit:name>
            <spirit:displayName>S-mode Software Interrupt Enable</spirit:displayName>
            <spirit:description>Enables supervisor mode software interrupts.</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>USIE</spirit:name>
            <spirit:description>enable U-mode software interrrupts</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mtvec</spirit:name>
          <spirit:displayName>Machine Trap Vector</spirit:displayName>
          <spirit:description>This register holds trap vector configuration, consisting of a vector base address and a vector mode.</spirit:description>
          <spirit:addressOffset>0x305</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>BASE</spirit:name>
            <spirit:description>Holds the vector base address. The value in the BASE field must always be aligned on a 4-byte boundary.</spirit:description>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>30</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>MODE</spirit:name>
            <spirit:description>Imposes additional alignment constraints on the value in the BASE field.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Direct</spirit:name>
                <spirit:description>All exceptions set ``pc`` to BASE.</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Vectored</spirit:name>
                <spirit:description>Asynchronous interrupts set ``pc`` to BASE+4×cause.</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Reserved_2</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>2</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Reserved_3</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>3</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mcountern</spirit:name>
          <spirit:displayName>Machine Counter Enable</spirit:displayName>
          <spirit:description>This register controls the availability of the hardware performance-monitoring counters to the next-lowest privileged mode.</spirit:description>
          <spirit:addressOffset>0x306</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>HPMn</spirit:name>
            <spirit:displayName>Hpmcountern</spirit:displayName>
            <spirit:description>When HPMn is clear, attempts to read the ``hpmcountern`` register while executing in S-mode or U-mode will cause an illegal instruction exception. When this bit is set, access to the corresponding register is permitted in the next implemented privilege mode.</spirit:description>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>29</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>IR</spirit:name>
            <spirit:displayName>Instret</spirit:displayName>
            <spirit:description>When IR is clear, attempts to read the ``instret`` register while executing in S-mode or U-mode will cause an illegal instruction exception. When this bit is set, access to the corresponding register is permitted in the next implemented privilege mode.</spirit:description>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>TM</spirit:name>
            <spirit:displayName>Time</spirit:displayName>
            <spirit:description>When TM is clear, attempts to read the ``time`` register while executing in S-mode or U-mode will cause an illegal instruction exception. When this bit is set, access to the corresponding register is permitted in the next implemented privilege mode.</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>CY</spirit:name>
            <spirit:displayName>Cycle</spirit:displayName>
            <spirit:description>When CY is clear, attempts to read the ``cycle`` register while executing in S-mode or U-mode will cause an illegal instruction exception. When this bit is set, access to the corresponding register is permitted in the next implemented privilege mode.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>hpmevent</spirit:name>
          <spirit:displayName>Hardware Performance-Monitoring Event Selector</spirit:displayName>
          <spirit:description>This register controls which event causes the corresponding counter to increment.</spirit:description>
          <spirit:dim>6</spirit:dim>
          <spirit:addressOffset>0x323</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0x0000001F</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>mhpmevent</spirit:name>
            <spirit:description>event selector CSRs</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>5</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mscratch</spirit:name>
          <spirit:displayName>Machine Scratch</spirit:displayName>
          <spirit:description>This register is used to hold a pointer to a machine-mode hart-local context space and swapped with a user register upon entry to an M-mode trap handler.</spirit:description>
          <spirit:addressOffset>0x340</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>mscratch</spirit:name>
            <spirit:displayName>Machine Scratch</spirit:displayName>
            <spirit:description>Holds a pointer to a machine-mode hart-local context space and swapped with a user register upon entry to an M-mode trap handler.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mepc</spirit:name>
          <spirit:displayName>Machine Exception Program Counter</spirit:displayName>
          <spirit:description>This register must be able to hold all valid virtual addresses.</spirit:description>
          <spirit:addressOffset>0x341</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>mepc</spirit:name>
            <spirit:displayName>Machine Exception Program Counter</spirit:displayName>
            <spirit:description>When a trap is taken into M-mode, ``mepc`` is written with the virtual address of the instruction that was interrupted or that encountered the exception.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mcause</spirit:name>
          <spirit:displayName>Machine Cause</spirit:displayName>
          <spirit:description>When a trap is taken into M-mode, mcause is written with a code indicating the event that caused the trap.

Machine cause register (``mcause``) values after trap are shown in the following table.

=========  ==============  ==============================
Interrupt  Exception Code  Description
=========  ==============  ==============================
        1               0  *Reserved*
        1               1  Supervisor software interrupt
        1             2-4  *Reserved*
        1               5  Supervisor timer interrupt
        1             6-8  *Reserved*
        1               9  Supervisor external interrupt
        1           10-15  *Reserved*
        1             ≥16  *Designated for platform use*
        0               0  Instruction address misaligned
        0               1  Instruction access fault
        0               2  Illegal instruction
        0               3  Breakpoint
        0               4  Load address misaligned
        0               5  Load access fault
        0               6  Store/AMO address misaligned
        0               7  Store/AMO access fault
        0               8  Environment call from U-mode
        0               9  Environment call from S-mode
        0           10-11  *Reserved*
        0              12  Instruction page fault
        0              13  Load page fault
        0              14  *Reserved*
        0              15  Store/AMO page fault
        0           16-23  *Reserved*
        0           24-31  *Designated for custom use*
        0           32-47  *Reserved*
        0           48-63  *Designated for custom use*
        0             ≥64  *Reserved*
=========  ==============  ==============================</spirit:description>
          <spirit:addressOffset>0x342</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>Interrupt</spirit:name>
            <spirit:displayName>Interrupt</spirit:displayName>
            <spirit:description>This bit is set if the trap was caused by an interrupt.</spirit:description>
            <spirit:bitOffset>31</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>exception_code</spirit:name>
            <spirit:displayName>Exception Code</spirit:displayName>
            <spirit:description>This field contains a code identifying the last exception or interrupt.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>31</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WLRL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mtval</spirit:name>
          <spirit:displayName>Machine Trap Value</spirit:displayName>
          <spirit:description>When a trap is taken into M-mode, mtval is either set to zero or written with exception-specific information to assist software in handling the trap.</spirit:description>
          <spirit:addressOffset>0x343</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>mtval</spirit:name>
            <spirit:displayName>Machine Trap Value</spirit:displayName>
            <spirit:description>If ``mtval`` is written with a nonzero value when a breakpoint, address-misaligned, access-fault, or page-fault exception occurs on an instruction fetch, load, or store, then mtval will contain the faulting virtual address.

If ``mtval`` is written with a nonzero value when a misaligned load or store causes an access-fault or page-fault exception, then ``mtval`` will contain the virtual address of the portion of the access that caused the fault.

If ``mtval`` is written with a nonzero value when an instruction access-fault or page-fault exception occurs on a system with variable-length instructions, then ``mtval`` will contain the virtual address of the portion of the instruction that caused the fault, while ``mepc`` will point to the beginning of the instruction.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mip</spirit:name>
          <spirit:displayName>Machine Interrupt Pending</spirit:displayName>
          <spirit:description>This register contains machine interrupt pending bits.</spirit:description>
          <spirit:addressOffset>0x344</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0x00000BBB</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>MEIP</spirit:name>
            <spirit:displayName>M-mode External Interrupt Pending</spirit:displayName>
            <spirit:description>The interrupt-pending bit for machine-level external interrupts.</spirit:description>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>SEIP</spirit:name>
            <spirit:displayName>S-mode External Interrupt Pending</spirit:displayName>
            <spirit:description>The interrupt-pending bit for supervisor-level external interrupts.</spirit:description>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>UEIP</spirit:name>
            <spirit:description>enables external interrupts</spirit:description>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>MTIP</spirit:name>
            <spirit:displayName>M-mode Timer Interrupt Pending</spirit:displayName>
            <spirit:description>The interrupt-pending bit for machine-level timer interrupts.</spirit:description>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>STIP</spirit:name>
            <spirit:displayName>S-mode Timer Interrupt Pending</spirit:displayName>
            <spirit:description>The interrupt-pending bit for supervisor-level timer interrupts.</spirit:description>
            <spirit:bitOffset>5</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>UTIP</spirit:name>
            <spirit:description>Correspond to timer interrupt-pending bits for user interrupt</spirit:description>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>MSIP</spirit:name>
            <spirit:displayName>M-mode Software Interrupt Pending</spirit:displayName>
            <spirit:description>The interrupt-pending bit for machine-level software interrupts.</spirit:description>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>SSIP</spirit:name>
            <spirit:displayName>S-mode Software Interrupt Pending</spirit:displayName>
            <spirit:description>The interrupt-pending bit for supervisor-level software interrupts.</spirit:description>
            <spirit:bitOffset>1</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>USIP</spirit:name>
            <spirit:description>A hart to directly write its own USIP bits when running in the appropriate mode</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>pmpcfg0</spirit:name>
          <spirit:displayName>Physical Memory Protection Config 0</spirit:displayName>
          <spirit:description>Holds configuration 0-3.</spirit:description>
          <spirit:addressOffset>0x3A0</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>pmp3cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 3 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>24</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>pmp2cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 2 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>pmp1cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 1 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>pmp0cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 0 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>pmpcfg1</spirit:name>
          <spirit:displayName>Physical Memory Protection Config 1</spirit:displayName>
          <spirit:description>Holds configuration 4-7.</spirit:description>
          <spirit:addressOffset>0x3A1</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>pmp7cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 7 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>24</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>pmp6cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 6 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>pmp5cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 5 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>pmp4cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 4 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>pmpcfg2</spirit:name>
          <spirit:displayName>Physical Memory Protection Config 2</spirit:displayName>
          <spirit:description>Holds configuration 8-11.</spirit:description>
          <spirit:addressOffset>0x3A2</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>pmp11cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 11 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>24</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>pmp10cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 10 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>pmp9cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 9 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>pmp8cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 8 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>pmpcfg3</spirit:name>
          <spirit:displayName>Physical Memory Protection Config 3</spirit:displayName>
          <spirit:description>Holds configuration 12-15.</spirit:description>
          <spirit:addressOffset>0x3A3</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>pmp15cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 15 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>24</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>pmp14cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 14 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>16</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>pmp13cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 13 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>8</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>pmp12cfg</spirit:name>
            <spirit:displayName>Physical Memory Protection 12 Config</spirit:displayName>
            <spirit:description>Holds the configuration.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>8</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>pmpaddr</spirit:name>
          <spirit:displayName>Physical Memory Protection Address</spirit:displayName>
          <spirit:description>Address register for Physical Memory Protection.</spirit:description>
          <spirit:dim>16</spirit:dim>
          <spirit:addressOffset>0x3B0</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>address</spirit:name>
            <spirit:displayName>Address</spirit:displayName>
            <spirit:description>Encodes bits 33-2 of a 34-bit physical address.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>icache</spirit:name>
          <spirit:displayName>Instuction Cache</spirit:displayName>
          <spirit:description>Custom Register to enable/disable for Icache [bit 0]</spirit:description>
          <spirit:addressOffset>0x700</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000001</spirit:value>
            <spirit:mask>0x00000001</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>icache</spirit:name>
            <spirit:displayName>Instruction Cache</spirit:displayName>
            <spirit:description>Custom Register</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>dcache</spirit:name>
          <spirit:displayName>Data Cache</spirit:displayName>
          <spirit:description>Custom Register to enable/disable for Dcache [bit 0]</spirit:description>
          <spirit:addressOffset>0x701</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000001</spirit:value>
            <spirit:mask>0x00000001</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>dcache</spirit:name>
            <spirit:displayName>Data Cache</spirit:displayName>
            <spirit:description>Custom Register</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>tselect</spirit:name>
          <spirit:displayName>Trigger Select</spirit:displayName>
          <spirit:description>This register determines which trigger is accessible through the other trigger registers.</spirit:description>
          <spirit:addressOffset>0x7A0</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>index</spirit:name>
            <spirit:displayName>Index</spirit:displayName>
            <spirit:description>The set of accessible triggers must start at 0, and be contiguous.

Writes of values greater than or equal to the number of supported triggers may result in a different value in this register than what was written. To verify that what they wrote is a valid index, debuggers can read back the value and check that ``tselect`` holds what they wrote.

Since triggers can be used both by Debug Mode and M-mode, the debugger must restore this register if it modifies it.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>D</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>tdata1</spirit:name>
          <spirit:displayName>Trigger Data 1</spirit:displayName>
          <spirit:description>Trigger-specific data.</spirit:description>
          <spirit:addressOffset>0x7A1</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>type</spirit:name>
            <spirit:displayName>Type</spirit:displayName>
            <spirit:description>Type of trigger.</spirit:description>
            <spirit:bitOffset>28</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>no_trigger</spirit:name>
                <spirit:description>There is no trigger at this ``tselect``.</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>legacy_address_match_trigger</spirit:name>
                <spirit:description>The trigger is a legacy SiFive address match trigger. These should not be implemented and aren’t further documented here.</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>address_data_match_trigger</spirit:name>
                <spirit:description>The trigger is an address/data match trigger. The remaining bits in this register act as described in ``mcontrol``.</spirit:description>
                <spirit:value>2</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>instruction_count_trigger</spirit:name>
                <spirit:description>The trigger is an instruction count trigger. The remaining bits in this register act as described in ``icount``.</spirit:description>
                <spirit:value>3</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>interrupt_trigger</spirit:name>
                <spirit:description>The trigger is an interrupt trigger. The remaining bits in this register act as described in ``itrigger``.</spirit:description>
                <spirit:value>4</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>exception_trigger</spirit:name>
                <spirit:description>The trigger is an exception trigger. The remaining bits in this register act as described in ``etrigger``.</spirit:description>
                <spirit:value>5</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Reserved_6</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>6</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Reserved_7</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>7</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Reserved_8</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>8</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Reserved_9</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>9</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Reserved_10</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>10</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Reserved_11</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>11</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Reserved_12</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>12</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Reserved_13</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>13</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Reserved_14</spirit:name>
                <spirit:description>*Reserved.*</spirit:description>
                <spirit:value>14</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>trigger_exists</spirit:name>
                <spirit:description>This trigger exists (so enumeration shouldn’t terminate), but is not currently available.</spirit:description>
                <spirit:value>15</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
          </spirit:field>
          <spirit:field>
            <spirit:name>dmode</spirit:name>
            <spirit:displayName>Debug Mode</spirit:displayName>
            <spirit:description>This bit is only writable from Debug Mode.</spirit:description>
            <spirit:bitOffset>27</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>D_and_M_mode</spirit:name>
                <spirit:description>Both Debug and M-mode can write the ``tdata`` registers at the selected ``tselect``.</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>M_mode_only</spirit:name>
                <spirit:description>Only Debug Mode can write the ``tdata`` registers at the selected ``tselect``. Writes from other modes are ignored.</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
          </spirit:field>
          <spirit:field>
            <spirit:name>data</spirit:name>
            <spirit:displayName>Data</spirit:displayName>
            <spirit:description>Trigger-specific data.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>27</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>D</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>tdata2</spirit:name>
          <spirit:displayName>Trigger Data 2</spirit:displayName>
          <spirit:description>Trigger-specific data.</spirit:description>
          <spirit:addressOffset>0x7A2</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>data</spirit:name>
            <spirit:displayName>Data</spirit:displayName>
            <spirit:description>Trigger-specific data.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>D</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>tdata3</spirit:name>
          <spirit:displayName>Trigger Data 3</spirit:displayName>
          <spirit:description>Trigger-specific data.</spirit:description>
          <spirit:addressOffset>0x7A3</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>data</spirit:name>
            <spirit:displayName>Data</spirit:displayName>
            <spirit:description>Trigger-specific data.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>D</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>tinfo</spirit:name>
          <spirit:displayName>Trigger Info</spirit:displayName>
          <spirit:description>Shows trigger information.</spirit:description>
          <spirit:addressOffset>0x7A4</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0x0000FFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>info</spirit:name>
            <spirit:displayName>Info</spirit:displayName>
            <spirit:description>One bit for each possible ``type`` enumerated in ``tdata1``. Bit N corresponds to type N. If the bit is set, then that type is supported by the currently selected trigger.

If the currently selected trigger doesn’t exist, this field contains 1.

If ``type`` is not writable, this register may be unimplemented, in which case reading it causes an illegal instruction exception. In this case the debugger can read the only supported type from ``tdata1``.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>16</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>D</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>dcsr</spirit:name>
          <spirit:displayName>Debug Control and Status</spirit:displayName>
          <spirit:description>Debug ontrol and status register.</spirit:description>
          <spirit:addressOffset>0x7B0</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xF000BFDF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>xdebugver</spirit:name>
            <spirit:displayName>Debug Version</spirit:displayName>
            <spirit:description>Shows the version of the debug support.</spirit:description>
            <spirit:bitOffset>28</spirit:bitOffset>
            <spirit:bitWidth>4</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read">
                <spirit:name>no_ext_debug</spirit:name>
                <spirit:description>There is no external debug support.</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read">
                <spirit:name>ext_debug_spec</spirit:name>
                <spirit:description>External debug support exists as it is described in the riscv-debug-release document.</spirit:description>
                <spirit:value>4</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read">
                <spirit:name>ext_debug_no_spec</spirit:name>
                <spirit:description>There is external debug support, but it does not conform to any available version of the riscv-debug-release spec.</spirit:description>
                <spirit:value>15</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
          </spirit:field>
          <spirit:field>
            <spirit:name>ebreakm</spirit:name>
            <spirit:displayName>Environment Breakpoint M-mode</spirit:displayName>
            <spirit:description>Shows the behvior of the ``ebreak`` instruction in machine mode.</spirit:description>
            <spirit:bitOffset>15</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>break_as_spec</spirit:name>
                <spirit:description>``ebreak`` instructions in M-mode behave as described in the Privileged Spec.</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>break_to_debug</spirit:name>
                <spirit:description>``ebreak`` instructions in M-mode enter Debug Mode.</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
          </spirit:field>
          <spirit:field>
            <spirit:name>ebreaks</spirit:name>
            <spirit:displayName>Environment Breakpoint S-mode</spirit:displayName>
            <spirit:description>Shows the behvior of the ``ebreak`` instruction in supervisor mode.</spirit:description>
            <spirit:bitOffset>13</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>break_as_spec</spirit:name>
                <spirit:description>``ebreak`` instructions in S-mode behave as described in the Privileged Spec.</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>break_to_debug</spirit:name>
                <spirit:description>``ebreak`` instructions in S-mode enter Debug Mode.</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
          </spirit:field>
          <spirit:field>
            <spirit:name>ebreaku</spirit:name>
            <spirit:displayName>Environment Breakpoint U-mode</spirit:displayName>
            <spirit:description>Shows the behvior of the ``ebreak`` instruction in user mode.</spirit:description>
            <spirit:bitOffset>12</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>break_as_spec</spirit:name>
                <spirit:description>``ebreak`` instructions in U-mode behave as described in the Privileged Spec.</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>break_to_debug</spirit:name>
                <spirit:description>``ebreak`` instructions in U-mode enter Debug Mode.</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
          </spirit:field>
          <spirit:field>
            <spirit:name>stepie</spirit:name>
            <spirit:displayName>Stepping Interrupt Enable</spirit:displayName>
            <spirit:description>Enables/disables interrupts for single stepping.

The debugger must not change the value of this bit while the hart is running.</spirit:description>
            <spirit:bitOffset>11</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>disabled</spirit:name>
                <spirit:description>Interrupts are disabled during single stepping.</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>enabled</spirit:name>
                <spirit:description>Interrupts are enabled during single stepping.</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>stopcount</spirit:name>
            <spirit:displayName>Stop Counters</spirit:displayName>
            <spirit:description>Starts/stops incrementing counters in debug mode.</spirit:description>
            <spirit:bitOffset>10</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>increment_counters</spirit:name>
                <spirit:description>Increment counters as usual.</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>dont_increment_counters</spirit:name>
                <spirit:description>Don’t increment any counters while in Debug Mode or on ``ebreak`` instructions that cause entry into Debug Mode.</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>stoptime</spirit:name>
            <spirit:displayName>Stop Timers</spirit:displayName>
            <spirit:description>Starts/stops incrementing timers in debug mode.</spirit:description>
            <spirit:bitOffset>9</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>increment_timers</spirit:name>
                <spirit:description>Increment timers as usual.</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>dont_increment_timers</spirit:name>
                <spirit:description>Don’t increment any hart-local timers while in Debug Mode.</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>cause</spirit:name>
            <spirit:displayName>Cause</spirit:displayName>
            <spirit:description>Explains why Debug Mode was entered.

When there are multiple reasons to enter Debug Mode in a single cycle, hardware sets ``cause`` to the cause with the highest priority.</spirit:description>
            <spirit:bitOffset>6</spirit:bitOffset>
            <spirit:bitWidth>3</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>ebreak_instruction</spirit:name>
                <spirit:description>An ``ebreak`` instruction was executed. (priority 3)</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>trigger_module</spirit:name>
                <spirit:description>The Trigger Module caused a breakpoint exception. (priority 4, highest)</spirit:description>
                <spirit:value>2</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>debugger_request</spirit:name>
                <spirit:description>The debugger requested entry to Debug Mode using ``haltreq``. (priority 1)</spirit:description>
                <spirit:value>3</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>single_step</spirit:name>
                <spirit:description>The hart single stepped because ``step`` was set. (priority 0, lowest)</spirit:description>
                <spirit:value>4</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>reset_halt</spirit:name>
                <spirit:description>The hart halted directly out of reset due to ``resethaltreq``. It is also acceptable to report 3 when this happens. (priority 2)</spirit:description>
                <spirit:value>5</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
          </spirit:field>
          <spirit:field>
            <spirit:name>mprven</spirit:name>
            <spirit:displayName>Modify Privilege Enable</spirit:displayName>
            <spirit:description>Enables/disables the modify privilege setting in debug mode.</spirit:description>
            <spirit:bitOffset>4</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>disable_mprv</spirit:name>
                <spirit:description>MPRV in ``mstatus`` is ignored in Debug Mode.</spirit:description>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>enable_mprv</spirit:name>
                <spirit:description>MPRV in ``mstatus`` takes effect in Debug Mode.</spirit:description>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
            <spirit:vendorExtensions>
              <RISCV_behavior>WARL</RISCV_behavior>
            </spirit:vendorExtensions>
          </spirit:field>
          <spirit:field>
            <spirit:name>nmip</spirit:name>
            <spirit:displayName>Non-Maskable Interrupt Pending</spirit:displayName>
            <spirit:description>When set, there is a Non-Maskable-Interrupt (NMI) pending for the hart.</spirit:description>
            <spirit:bitOffset>3</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>step</spirit:name>
            <spirit:displayName>Step</spirit:displayName>
            <spirit:description>When set and not in Debug Mode, the hart will only execute a single instruction and then enter Debug Mode. If the instruction does not complete due to an exception, the hart will immediately enter Debug Mode before executing the trap handler, with appropriate exception registers set. The debugger must not change the value of this bit while the hart is running.</spirit:description>
            <spirit:bitOffset>2</spirit:bitOffset>
            <spirit:bitWidth>1</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>prv</spirit:name>
            <spirit:displayName>Privilege level</spirit:displayName>
            <spirit:description>Contains the privilege level the hart was operating in when Debug Mode was entered. A debugger can change this value to change the hart’s privilege level when exiting Debug Mode.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>2</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
            <spirit:enumeratedValues>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>User</spirit:name>
                <spirit:value>0</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Supervisor</spirit:name>
                <spirit:value>1</spirit:value>
              </spirit:enumeratedValue>
              <spirit:enumeratedValue spirit:usage="read-write">
                <spirit:name>Machine</spirit:name>
                <spirit:value>3</spirit:value>
              </spirit:enumeratedValue>
            </spirit:enumeratedValues>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>D</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>dpc</spirit:name>
          <spirit:displayName>Debug PC</spirit:displayName>
          <spirit:description>Upon entry to debug mode, ``dpc`` is updated with the virtual address of the next instruction to be executed.

When resuming, the hart’s PC is updated to the virtual address stored in ``dpc``. A debugger may write ``dpc`` to change where the hart resumes.</spirit:description>
          <spirit:addressOffset>0x7B1</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>dpc</spirit:name>
            <spirit:description>The ``dpc`` behavior is described in more detail in the table below.

.. csv-table::
  :header: &#34;Cause&#34;, &#34;Virtual Address in DPC&#34;

  &#34;``ebreak``&#34;, &#34;Address of the ``ebreak`` instruction.&#34;
  &#34;single step&#34;, &#34;Address of the instruction that would be executed next if no debugging was going on. Ie. pc + 4 for 32-bit instructions that don’t change program flow, the destination PC on taken jumps/branches, etc.&#34;
  &#34;trigger module&#34;, &#34;If ``timing`` is 0, the address of the instruction which caused the trigger to fire. If ``timing`` is 1, the address of the next instruction to be executed at the time that debug mode was entered.&#34;
  &#34;halt request&#34;, &#34;Address of the next instruction to be executed at the time that debug mode was entered.&#34;</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>D</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>dscratch</spirit:name>
          <spirit:displayName>Debug Scratch Register</spirit:displayName>
          <spirit:description>Optional scratch register. A debugger must not write to this register unless ``hartinfo`` explicitly mentions it.</spirit:description>
          <spirit:dim>2</spirit:dim>
          <spirit:addressOffset>0x7B2</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>dscratch</spirit:name>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>D</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>ftran</spirit:name>
          <spirit:description>Floating Point Custom CSR</spirit:description>
          <spirit:addressOffset>0x800</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0x0000007F</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>ftran</spirit:name>
            <spirit:description>Floating Point Custom CSR</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>7</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>U</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mcycle</spirit:name>
          <spirit:displayName>M-mode Cycle counter</spirit:displayName>
          <spirit:description>Counts the number of clock cycles executed by the processor core on which the hart is running.</spirit:description>
          <spirit:addressOffset>0xB00</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:description>Counts the number of clock cycles executed by the processor core.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>minstret</spirit:name>
          <spirit:displayName>Machine Instruction Retired counter</spirit:displayName>
          <spirit:description>Counts the number of instructions the hart has retired.</spirit:description>
          <spirit:addressOffset>0xB02</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:description>Counts the number of instructions the hart has retired.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>ml1_icache_miss</spirit:name>
          <spirit:displayName>L1 Inst Cache Miss</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xB03</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>ml1_dcache_miss</spirit:name>
          <spirit:displayName>L1 Data Cache Miss</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xB04</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mitlb_miss</spirit:name>
          <spirit:displayName>ITLB Miss</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xB05</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mdtlb_miss</spirit:name>
          <spirit:displayName>DTLB Miss</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xB06</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mload</spirit:name>
          <spirit:displayName>Loads</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xB07</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mstore</spirit:name>
          <spirit:displayName>Stores</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xB08</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mexception</spirit:name>
          <spirit:displayName>Taken Exceptions</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xB09</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mexception_ret</spirit:name>
          <spirit:displayName>Exception Return</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xB0A</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mbranch_jump</spirit:name>
          <spirit:displayName>Software Change of PC</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xB0B</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mcall</spirit:name>
          <spirit:displayName>Procedure Call</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xB0C</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mret</spirit:name>
          <spirit:displayName>Procedure Return</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xB0D</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mmis_predict</spirit:name>
          <spirit:displayName>Branch mis-predicted</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xB0E</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>msb_full</spirit:name>
          <spirit:displayName>Scoreboard Full</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xB0F</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mif_empty</spirit:name>
          <spirit:displayName>Instruction Fetch Queue Empty</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xB10</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mcycleh</spirit:name>
          <spirit:displayName>Upper 32-bits of M-mode Cycle counter</spirit:displayName>
          <spirit:description>Counts the number of clock cycles executed by the processor core on which the hart is running.</spirit:description>
          <spirit:addressOffset>0xB80</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:description>Counts the number of clock cycles executed by the processor core.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>minstreth</spirit:name>
          <spirit:displayName>Upper 32-bits of Machine Instruction Retired counter</spirit:displayName>
          <spirit:description>Counts the number of instructions the hart has retired.</spirit:description>
          <spirit:addressOffset>0xB82</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:description>Counts the number of instructions the hart has retired.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mhpmcounterh</spirit:name>
          <spirit:displayName>Upper 32-bits of Machine Hardware Performance Monitoring Counter</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:dim>6</spirit:dim>
          <spirit:addressOffset>0xB83</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:access>read-write</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:access>read-write</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>cycle</spirit:name>
          <spirit:displayName>Cycle counter</spirit:displayName>
          <spirit:description>Cycle counter for RDCYCLE instruction.</spirit:description>
          <spirit:addressOffset>0xC00</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>U</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>time</spirit:name>
          <spirit:displayName>Timer</spirit:displayName>
          <spirit:description>Timer for RDTIME instruction.</spirit:description>
          <spirit:addressOffset>0xC01</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
        </spirit:register>
        <spirit:register>
          <spirit:name>instret</spirit:name>
          <spirit:displayName>Instruction Retired counter</spirit:displayName>
          <spirit:description>Instructions-retired counter for RDINSTRET instruction</spirit:description>
          <spirit:addressOffset>0xC02</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>U</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>l1_icache_miss</spirit:name>
          <spirit:displayName>L1 Inst Cache Miss</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xC03</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>l1_dcache_miss</spirit:name>
          <spirit:displayName>L1 Data Cache Miss</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xC04</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>itlb_miss</spirit:name>
          <spirit:displayName>ITLB Miss</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xC05</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>dtlb_miss</spirit:name>
          <spirit:displayName>DTLB Miss</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xC06</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>load</spirit:name>
          <spirit:displayName>Loads</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xC07</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>store</spirit:name>
          <spirit:displayName>Stores</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xC08</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>exception</spirit:name>
          <spirit:displayName>Taken Exceptions</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xC09</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>exception_ret</spirit:name>
          <spirit:displayName>Exception Return</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xC0A</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>branch_jump</spirit:name>
          <spirit:displayName>Software Change of PC</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xC0B</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>call</spirit:name>
          <spirit:displayName>Procedure Call</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xC0C</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>ret</spirit:name>
          <spirit:displayName>Procedure Return</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xC0D</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mis_predict</spirit:name>
          <spirit:displayName>Branch mis-predicted</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xC0E</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>sb_full</spirit:name>
          <spirit:displayName>Scoreboard Full</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xC0F</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>if_empty</spirit:name>
          <spirit:displayName>Instruction Fetch Queue Empty</spirit:displayName>
          <spirit:description>Hardware performance event counter.</spirit:description>
          <spirit:addressOffset>0xC10</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>cycleh</spirit:name>
          <spirit:displayName>Upper 32-bits of Cycle counter</spirit:displayName>
          <spirit:description>Cycle counter for RDCYCLE instruction.</spirit:description>
          <spirit:addressOffset>0xC80</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>U</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>timeh</spirit:name>
          <spirit:displayName>Upper 32-bit of Timer</spirit:displayName>
          <spirit:description>Timer for RDTIME instruction.</spirit:description>
          <spirit:addressOffset>0xC81</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
        </spirit:register>
        <spirit:register>
          <spirit:name>instreth</spirit:name>
          <spirit:displayName>Upper 32-bits of Instruction Retired counter</spirit:displayName>
          <spirit:description>Instructions-retired counter for RDINSTRET instruction</spirit:description>
          <spirit:addressOffset>0xC82</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>count</spirit:name>
            <spirit:displayName>Count</spirit:displayName>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>U</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mvendorid</spirit:name>
          <spirit:displayName>Machine Vendor ID</spirit:displayName>
          <spirit:description>This register provids the JEDEC manufacturer ID of the provider of the core.</spirit:description>
          <spirit:addressOffset>0xF11</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>bank</spirit:name>
            <spirit:displayName>Bank</spirit:displayName>
            <spirit:description>Contain encoding for number of one-byte continuation codes discarding the parity bit.</spirit:description>
            <spirit:bitOffset>7</spirit:bitOffset>
            <spirit:bitWidth>25</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:field>
            <spirit:name>offset</spirit:name>
            <spirit:displayName>Offset</spirit:displayName>
            <spirit:description>Contain encording for the final byte discarding the parity bit.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>7</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>marchid</spirit:name>
          <spirit:displayName>Machine Architecture ID</spirit:displayName>
          <spirit:description>This register encodes the base microarchitecture of the hart.</spirit:description>
          <spirit:addressOffset>0xF12</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000003</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>architecture_id</spirit:name>
            <spirit:displayName>Architecture ID</spirit:displayName>
            <spirit:description>Provide Encoding the base microarchitecture of the hart.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mimpid</spirit:name>
          <spirit:displayName>Machine Implementation ID</spirit:displayName>
          <spirit:description>Provides a unique encoding of the version of the processor implementation.</spirit:description>
          <spirit:addressOffset>0xF13</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>implementation</spirit:name>
            <spirit:displayName>Implementation</spirit:displayName>
            <spirit:description>Provides unique encoding of the version of the processor implementation.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
        <spirit:register>
          <spirit:name>mhartid</spirit:name>
          <spirit:displayName>Machine Hardware Thread ID</spirit:displayName>
          <spirit:description>This register contains the integer ID of the hardware thread running the code.</spirit:description>
          <spirit:addressOffset>0xF14</spirit:addressOffset>
          <spirit:size>32</spirit:size>
          <spirit:volatile>true</spirit:volatile>
          <spirit:access>read-only</spirit:access>
          <spirit:reset>
            <spirit:value>0x00000000</spirit:value>
            <spirit:mask>0xFFFFFFFF</spirit:mask>
          </spirit:reset>
          <spirit:field>
            <spirit:name>hart_id</spirit:name>
            <spirit:displayName>Hart ID</spirit:displayName>
            <spirit:description>Contains the integer ID of the hardware thread running the code.</spirit:description>
            <spirit:bitOffset>0</spirit:bitOffset>
            <spirit:bitWidth>32</spirit:bitWidth>
            <spirit:volatile>true</spirit:volatile>
            <spirit:access>read-only</spirit:access>
          </spirit:field>
          <spirit:vendorExtensions>
            <privilege_mode>M</privilege_mode>
          </spirit:vendorExtensions>
        </spirit:register>
      </spirit:addressBlock>
      <spirit:addressUnitBits>32</spirit:addressUnitBits>
    </spirit:memoryMap>
  </spirit:memoryMaps>
</spirit:component>
